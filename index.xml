<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stadial's Site!</title><link>https://stadial.github.io/</link><description>Recent content on Stadial's Site!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 23 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://stadial.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Click Here!</title><link>https://stadial.github.io/p/click-here/</link><pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate><guid>https://stadial.github.io/p/click-here/</guid><description>&lt;h1 id="how-to-browse-this-site">How to browse this site?&lt;/h1>
&lt;p>Well, here you can find an index of indices, choose the subject that
you want, and there you can find more info.&lt;/p>
&lt;h1 id="semester-3">Semester 3&lt;/h1>
&lt;p>This semster was mostly empty, I had yet to start the site.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://stadial.github.io/p/sem3/engineering-programing/" >Engineering Programming - CS204&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://stadial.github.io/p/sem3/digital-logic/" >Digital Design - EE232&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://stadial.github.io/p/sem3/circuits1/" >Circuits I - EE241&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="semester-4">Semester 4&lt;/h1>
&lt;ul>
&lt;li>&lt;a class="link" href="https://stadial.github.io/p/math-for-ee/" >Math for EE - Math215&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Math for EE</title><link>https://stadial.github.io/p/math-for-ee/</link><pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate><guid>https://stadial.github.io/p/math-for-ee/</guid><description>&lt;h1 id="quizes">Quizes&lt;/h1>
&lt;p>-&lt;a class="link" href="https://stadial.github.io/p/sem4/mathee/quiz1/" >Quiz 1&lt;/a>&lt;/p>
&lt;h1 id="midterms">Midterms&lt;/h1>
&lt;p>:(&lt;/p></description></item><item><title>Courseoffering's first beta release!</title><link>https://stadial.github.io/p/courseofferings-first-beta-release/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://stadial.github.io/p/courseofferings-first-beta-release/</guid><description>&lt;h1 id="what-is-this-about">What is this about?&lt;/h1>
&lt;p>Seriously? you don&amp;rsquo;t know about this? :)&lt;br>
Well, I don&amp;rsquo;t expect you
to. &lt;a class="link" href="https://courseoffering.github.io/" target="_blank" rel="noopener"
>courseoffering&lt;/a> has ~137
visits as the time of writing.&lt;/p>
&lt;p>I am too lazy to write what is already recorded, &lt;a class="link" href="https://diode.zone/w/gvhSPdhnE9o1i5c2oDNbAu" target="_blank" rel="noopener"
>here you go&lt;/a>.&lt;/p>
&lt;iframe title="كيف تسوي جدول دراسي في اقل من 5 دقائق KFU" width="560" height="315" src="https://diode.zone/videos/embed/7d900cab-e7c7-4a56-a0f6-504e6e762538" frameborder="0" allowfullscreen="" sandbox="allow-same-origin allow-scripts allow-popups">&lt;/iframe>
&lt;h1 id="success">Success?&lt;/h1>
&lt;p>nah, I have learned that people don&amp;rsquo;t like change.&lt;/p>
&lt;h1 id="future-thoughts">Future thoughts?&lt;/h1>
&lt;p>I will continue developing the site for my own personal needs, for
I don&amp;rsquo;t want to create a schedule manually.&lt;/p>
&lt;p>I expect others not to use it, and such I won&amp;rsquo;t support anything other
than Engineering Department. Had other few more cool ideas, but meh,
this was a disappointing experience.&lt;/p>
&lt;p>Edit: Adding support for other departments is trivial, I will consider
doing that, maybe next year.&lt;/p></description></item><item><title>Circuits - EE241</title><link>https://stadial.github.io/p/sem3/circuits1/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://stadial.github.io/p/sem3/circuits1/</guid><description>&lt;p>OK, got no time rn, so there is no catchy intro :&amp;rsquo;)&lt;br>
feel free to &lt;a class="link" href="https://stadial.github.io/p/sem3/digital-logic" >read this one tho&lt;/a>&lt;/p>
&lt;p>Stay tuned! (don&amp;rsquo;t stay tuned actually, won&amp;rsquo;t update it)&lt;/p>
&lt;h1 id="what-does-this-page-have-then">What does this page have then?&lt;/h1>
&lt;p>Scroll down fren, the final project await you!&lt;br>
ofc i didn&amp;rsquo;t do the project alone, so I don&amp;rsquo;t claim credits for it all!&lt;/p>
&lt;p>Also check &lt;a class="link" href="https://stadial.github.io/disclaimer" >disclaimer&lt;/a>! DON&amp;rsquo;T USE THIS FOR ACADEMIC DISHONESTY!&lt;/p></description></item><item><title>Math for EE: Quiz 1</title><link>https://stadial.github.io/p/sem4/mathee/quiz1/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://stadial.github.io/p/sem4/mathee/quiz1/</guid><description>&lt;p>Quiz was pretty simple but long ;)&lt;/p>
&lt;h1 id="here-we-go">Here we go:&lt;/h1>
&lt;p>$$
A = \begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 \\
0 &amp;amp; 1 &amp;amp; 2 \\
1 &amp;amp; 2 &amp;amp; 3 \\
\end{bmatrix}
$$&lt;/p>
&lt;p>$$
B = \begin{bmatrix}
3 &amp;amp; 1 &amp;amp; 5 \\
1 &amp;amp; 0 &amp;amp; 2 \\
5 &amp;amp; 6 &amp;amp; 1 \\
\end{bmatrix}
$$&lt;/p>
&lt;p>Find $(A-B)^2$ and $(A+B)^2$&lt;/p>
&lt;details>
&lt;summary>Solution&lt;/summary>
&lt;p>This is left as an exercise to the reader ;)&lt;/p>
&lt;/details>
&lt;h1 id="last-words">Last words&lt;/h1>
&lt;p>good luck :D&lt;/p></description></item><item><title>Digital Logic Design - EE232</title><link>https://stadial.github.io/p/sem3/digital-logic/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>https://stadial.github.io/p/sem3/digital-logic/</guid><description>&lt;p>In the formless days, long before the rise of internet, all spells
were woven of pure mistery, all circuits were analog, and death
was common. Many engineers were disfigured by the insane amount of
math, found crumpled at the center of a circle of twisted, room sized
analog computers, and vacuum-tubed op-amps which burned unceasing in
the pooling of madness; some disappeared entirely, or wandered about
complexity, sun never touching their skin, breath never warming air.&lt;/p>
&lt;p>Digial Logic is a blessing, if only our ancestors knew, many suicides
might not have happened.&lt;/p>
&lt;h1 id="ignore-the-rumors">Ignore the rumors&lt;/h1>
&lt;p>Word has it that &lt;code>EE232&lt;/code> -Digital Logic Design- is what drives
students insane. This may or may not be true, but we(/I) know that it was
a fun course. It is true that our Professor arrived ~1 month late, and
we speed ran the course, but the course is good. I would say it was a
shame that we skipped &lt;code>verilog&lt;/code> tho :(&lt;/p>
&lt;h1 id="idc-just-give-me-resources-and-how-to-pass">IDC! Just give me Resources and how to Pass!&lt;/h1>
&lt;p>Yo calm down, are you by any chance a freshman? If so I think taking
&lt;a class="link" href="https://www.nand2tetris.org/" target="_blank" rel="noopener"
>NAND2Tetris&lt;/a> before hand will improve
the course experience, seeing the complexity of a computer internals
being explained is wonderful.&lt;/p>
&lt;p>Breathe deep, and allow your spirit to come unmoored from
analog crap, ascending to the plane of digtal world.&lt;/p>
&lt;h1 id="i-got-no-time-i-just-want-goodol-exams">I Got no time! I just want good&amp;rsquo;ol Exams!&lt;/h1>
&lt;p>Scroll down fren, you should find quizes, MidTerm and Final Exam!&lt;/p>
&lt;h1 id="last-word">Last Word&lt;/h1>
&lt;p>intro was by &lt;a class="link" href="https://aphyr.com/posts/342-typing-the-technical-interview" target="_blank" rel="noopener"
>Aphyr&lt;/a>, modified.&lt;/p></description></item><item><title>Final Exam: Digital Logic Design - EE232</title><link>https://stadial.github.io/p/sem3/digital-logic/final-exam/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>https://stadial.github.io/p/sem3/digital-logic/final-exam/</guid><description>&lt;p>This is going to be wild!&lt;/p>
&lt;h1 id="question-1">Question 1:&lt;/h1>
&lt;h2 id="part-a">Part A:&lt;/h2>
&lt;p>Design a combinational circuit that counts the Numbers of 1&amp;rsquo;s in 7-bit
($I_0$ $I_1$, &amp;hellip; $I_6$.)
input and has 3-bit output. ($O_0$, $O_1$, $O_3$).
And write the input equations.&lt;/p>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>&lt;p>Execuse the messy wiring!&lt;br>
&lt;figure
>
&lt;a href="https://stadial.github.io/7bit-adder.png" >
&lt;img src="https://stadial.github.io/7bit-adder.png"
loading="lazy"
alt="7bit Adder">
&lt;/a>
&lt;figcaption>7bit Adder&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>$$O_0 = I_0 \oplus I_1 \oplus I_2 &amp;hellip; \oplus I_7 $$
$$O_1 = $$ left as an exercise to the reader
$$O_3 = $$ left as an exercise to the reader&lt;/p>
&lt;/p>
&lt;/details>
&lt;h2 id="part-b">Part B:&lt;/h2>
&lt;p>Design a 5-bit comparator that takes 2&amp;rsquo;s compelemnt. you can use
comparators, adders, decoders, etc.&lt;/p>
&lt;h1 id="question-2">Question 2:&lt;/h1>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 137;
flex-basis: 330px"
>
&lt;a href="https://stadial.github.io/p/sem3/digital-logic/final-exam/final-simple-TFF.png" data-size="220x160">
&lt;img src="https://stadial.github.io/p/sem3/digital-logic/final-exam/final-simple-TFF.png"
width="220"
height="160"
srcset="https://stadial.github.io/p/sem3/digital-logic/final-exam/final-simple-TFF_hudcc76230bc2ecc29761317bf41ffd98d_2837_480x0_resize_box_3.png 480w, https://stadial.github.io/p/sem3/digital-logic/final-exam/final-simple-TFF_hudcc76230bc2ecc29761317bf41ffd98d_2837_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="T-Flip-Flop">
&lt;/a>
&lt;figcaption>T-Flip-Flop&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h2 id="part-a-1">Part A:&lt;/h2>
&lt;p>What is the function of this circuit?&lt;/p>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>Toggles every negative edge as long as &lt;code>X&lt;/code> is 1&lt;/p>
&lt;/details>
&lt;h2 id="part-b-1">Part B:&lt;/h2>
&lt;p>Reduce the state table (from the book)
&lt;figure
class="gallery-image"
style="
flex-grow: 179;
flex-basis: 430px"
>
&lt;a href="https://stadial.github.io/p/sem3/digital-logic/final-exam/state-table.png" data-size="409x228">
&lt;img src="https://stadial.github.io/p/sem3/digital-logic/final-exam/state-table.png"
width="409"
height="228"
srcset="https://stadial.github.io/p/sem3/digital-logic/final-exam/state-table_hu5825489b248add99bd3112f410336521_13984_480x0_resize_box_3.png 480w, https://stadial.github.io/p/sem3/digital-logic/final-exam/state-table_hu5825489b248add99bd3112f410336521_13984_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="State Table">
&lt;/a>
&lt;figcaption>State Table&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>&lt;figure
>
&lt;a href="https://stadial.github.io/reduced-state-table.png" >
&lt;img src="https://stadial.github.io/reduced-state-table.png"
loading="lazy"
alt="State Table">
&lt;/a>
&lt;figcaption>State Table&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;/details>
&lt;h2 id="part-c">Part C:&lt;/h2>
&lt;p>Draw the reduced state diagram of the table
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>&lt;figure
>
&lt;a href="https://stadial.github.io/reduced-state-table-diagram.png" >
&lt;img src="https://stadial.github.io/reduced-state-table-diagram.png"
loading="lazy"
alt="State Table">
&lt;/a>
&lt;figcaption>State Table&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;/details>
&lt;/p>
&lt;h2 id="part-d">Part D:&lt;/h2>
&lt;p>Implement it using T-Flip Flops&lt;/p>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>This is left as an exercise to the reader.&lt;/p>
&lt;/details>
&lt;h1 id="question-3">Question 3:&lt;/h1>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 200;
flex-basis: 480px"
>
&lt;a href="https://stadial.github.io/p/sem3/digital-logic/final-exam/DFF-series.png" data-size="440x220">
&lt;img src="https://stadial.github.io/p/sem3/digital-logic/final-exam/DFF-series.png"
width="440"
height="220"
srcset="https://stadial.github.io/p/sem3/digital-logic/final-exam/DFF-series_hue3e2d4f4ec48b0eab70cb0cfdbf34895_3649_480x0_resize_box_3.png 480w, https://stadial.github.io/p/sem3/digital-logic/final-exam/DFF-series_hue3e2d4f4ec48b0eab70cb0cfdbf34895_3649_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="D Flip Flops">
&lt;/a>
&lt;figcaption>D Flip Flops&lt;/figcaption>
&lt;/figure>
(Left is A, Middle is B, Right is C)&lt;/p>
&lt;h2 id="part--a">Part A:&lt;/h2>
&lt;p>Given the current state is &lt;code>ABC = 100&lt;/code>. What is the state for the next 7 cycles?&lt;/p>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>$$ A(t+1) = B \oplus C $$
$$ B(t+1) = A $$
$$ C(t+1) = C $$
$$ ABC(0) = 100 $$
$$ ABC(1) = 010 $$
$$ ABC(2) = 101 $$
$$ ABC(3) = 110 $$
$$ ABC(4) = 111 $$
$$ ABC(5) = 011 $$
$$ ABC(6) = 001 $$
$$ ABC(7) = 100 $$&lt;/p>
&lt;/details>
&lt;h2 id="part--b">Part B:&lt;/h2>
&lt;p>Convert the following &lt;code>D&lt;/code>-FF serial adder to a &lt;code>T&lt;/code>-FF:
&lt;figure
class="gallery-image"
style="
flex-grow: 122;
flex-basis: 294px"
>
&lt;a href="https://stadial.github.io/p/sem3/digital-logic/final-exam/serial-adder.png" data-size="510x415">
&lt;img src="https://stadial.github.io/p/sem3/digital-logic/final-exam/serial-adder.png"
width="510"
height="415"
srcset="https://stadial.github.io/p/sem3/digital-logic/final-exam/serial-adder_hue46238f9349038fd20247a761abf46d6_21802_480x0_resize_box_3.png 480w, https://stadial.github.io/p/sem3/digital-logic/final-exam/serial-adder_hue46238f9349038fd20247a761abf46d6_21802_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="D Flip Flops">
&lt;/a>
&lt;figcaption>D Flip Flops&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>Easy Solution: Convert the T-FlipFlop back to a D-FlipFlop! (i.e,
implement a D-FlipFlop with a T-Flipflop)&lt;br>
Standard Solution: do the truth table, K-maps, equations, etc.&lt;br>
This is left as an exercise to the reader.&lt;/p>
&lt;/details>
&lt;h2 id="part--c">Part C:&lt;/h2>
&lt;p>Given that all the registers are set to &lt;code>1011&lt;/code>, what is the value of
register &lt;code>A&lt;/code> after: &lt;code>4&lt;/code>, &lt;code>8&lt;/code>, &lt;code>12&lt;/code> and &lt;code>16&lt;/code> cycles. Initially, the Flip was
set to 0, (or Reset).&lt;/p>
&lt;p>Also, Register B is always filled with &lt;code>1011&lt;/code> every &lt;code>4&lt;/code> cycles! I am just too lazy to
draw that :)&lt;/p>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>&lt;p>We can see that after &lt;code>4&lt;/code> cycles, $A(t+4)=A + B + C $&lt;br>
We can also see the $C=$ carry of A&amp;rsquo;s sum&lt;br>
&lt;em>Initially&lt;/em>
$$ A (0) = 0 $$
$$ C (0) = 0 $$
&lt;em>After 4 cycles:&lt;/em>
$$ A (4) = 1011 + 1011 + 0 = 0110 $$
$$ C (4) = 1$$&lt;/p>
&lt;p>&lt;em>After 8 cycles:&lt;/em>
$$ A (8) = 0110 + 1011 + 1 = 0010 $$
$$ C (8) = 1$$&lt;/p>
&lt;p>&lt;em>After 12 cycles:&lt;/em>
$$ A (12) = 0010 + 1011 + 1 = 0010 $$
$$ C (12) = 1$$&lt;/p>
&lt;p>&lt;em>After 16 cycles:&lt;/em>
$$ A (16) = 0110 + 1011 + 1 = 1110 $$
$$ C (16) = 0$$&lt;/p>
&lt;/p>
&lt;/details>
&lt;h2 id="part-d-1">Part D:&lt;/h2>
&lt;p>Given the following truth table,&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">x&lt;/th>
&lt;th style="text-align:center">y&lt;/th>
&lt;th style="text-align:center">z&lt;/th>
&lt;th style="text-align:center">A&lt;/th>
&lt;th style="text-align:center">B&lt;/th>
&lt;th style="text-align:center">C&lt;/th>
&lt;th style="text-align:center">D&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">0&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>implement it using the following &lt;code>PAL&lt;/code> after filling the table.&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 77;
flex-basis: 187px"
>
&lt;a href="https://stadial.github.io/p/sem3/digital-logic/final-exam/PAL.png" data-size="689x884">
&lt;img src="https://stadial.github.io/p/sem3/digital-logic/final-exam/PAL.png"
width="689"
height="884"
srcset="https://stadial.github.io/p/sem3/digital-logic/final-exam/PAL_huf89bf5dba64b777574d65846005e21e4_40916_480x0_resize_box_3.png 480w, https://stadial.github.io/p/sem3/digital-logic/final-exam/PAL_huf89bf5dba64b777574d65846005e21e4_40916_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="PAL">
&lt;/a>
&lt;figcaption>PAL&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;details>
&lt;summary>Show Equations&lt;/summary>
&lt;p>Do the K-maps, then you get:&lt;br>
$$ A = \bar{z} + x \oplus y $$
$$ B = \overline{x \oplus y \oplus z} $$
$$ C = x \oplus z$$
$$ D = z + x \oplus y $$&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>Show Simplified Equations&lt;/summary>
&lt;p>&lt;p>$B$ can be simplifed as
$$ B = \overline{y \oplus C } $$
Which can be furthur simplified as
$$ B = \bar{y} \oplus C $$&lt;/p>
&lt;p>Also if you are wondering how tf $\oplus$ and $\bar{\oplus}$ are
implemented using AND and OR gates, refer to the book.&lt;/p>
&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>Show Table&lt;/summary>
&lt;p>This is left as exercise to the reader.&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>Show Connections&lt;/summary>
&lt;p>&lt;figure
>
&lt;a href="https://stadial.github.io/PAL-solved.png" >
&lt;img src="https://stadial.github.io/PAL-solved.png"
loading="lazy"
alt="PAL">
&lt;/a>
&lt;figcaption>PAL&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;/details></description></item><item><title>Final Exam: Engineering Programming - CS204</title><link>https://stadial.github.io/p/sem3/engineering-programing/final-exam/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>https://stadial.github.io/p/sem3/engineering-programing/final-exam/</guid><description>&lt;h1 id="exam-overview">Exam overview&lt;/h1>
&lt;p>Reread my other post &lt;a class="link" href="../" >CS204&lt;/a>, and keep on prayin.&lt;br>
Also read the &lt;a class="link" href="https://stadial.github.io/disclaimer" >DISCLAIMER&lt;/a>!&lt;/p>
&lt;h1 id="ze-exam">Ze Exam&lt;/h1>
&lt;h2 id="section-1-mcqs">Section 1 MCQs&lt;/h2>
&lt;p>This section was Multiple Choice Questions.&lt;br>
&lt;code>???&lt;/code> is a choice that I forgot :')&lt;/p>
&lt;h3 id="which-of-the-following-is-not-a-logical-operator">Which of the following is &lt;em>NOT&lt;/em> a logical operator?&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;amp;&amp;amp;&lt;/code>&lt;/li>
&lt;li>&lt;code>||&lt;/code>&lt;/li>
&lt;li>&lt;code>!&lt;/code>&lt;/li>
&lt;/ul>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>&amp;amp;&lt;/p>
&lt;/details>
&lt;h3 id="which-of-the-following-transfers-control-to-the-calling-function">Which of the following transfers control to the calling function?&lt;/h3>
&lt;ul>
&lt;li>&lt;code>switch&lt;/code>&lt;/li>
&lt;li>&lt;code>return&lt;/code>&lt;/li>
&lt;li>&lt;code>goto&lt;/code>&lt;/li>
&lt;li>&lt;code>???&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>return&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="which-is-best-suidted-to-get-strings-that-contain-spaces-from-the-users">Which is best suidted to get strings that contain spaces from the users.&lt;/h3>
&lt;ul>
&lt;li>&lt;code>scanf&lt;/code>&lt;/li>
&lt;li>&lt;code>printf&lt;/code>&lt;/li>
&lt;li>&lt;code>puts&lt;/code>&lt;/li>
&lt;li>&lt;code>gets&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>gets&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="performs-operation-then-checks-condition">Performs operation then checks condition&lt;/h3>
&lt;ul>
&lt;li>&lt;code>for&lt;/code>&lt;/li>
&lt;li>&lt;code>do-while&lt;/code>&lt;/li>
&lt;li>&lt;code>while&lt;/code>&lt;/li>
&lt;li>&lt;code>???&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>do-while&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="how--many-times-does-the-following-code-repeat">How many times does the following code repeat?&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Forever&lt;/code>&lt;/li>
&lt;li>&lt;code>Never&lt;/code>&lt;/li>
&lt;li>&lt;code>1&lt;/code>&lt;/li>
&lt;li>&lt;code>-&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>Forever&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="what-is-the-order-of-operations-in-the-following-code">What is the order of operations in the following code?&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>*%/-+=&lt;/code>&lt;/li>
&lt;li>&lt;code>*/%+-=&lt;/code>&lt;/li>
&lt;li>&lt;code>=+*/%-&lt;/code>&lt;/li>
&lt;li>&lt;code>-%/*+=&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>The second one&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="strcmp-returns-what-when-the-string-are-equal">&lt;code>strcmp&lt;/code> returns what when the string are equal?&lt;/h3>
&lt;ul>
&lt;li>&lt;code>1&lt;/code>&lt;/li>
&lt;li>&lt;code>0&lt;/code>&lt;/li>
&lt;li>&lt;code>-1&lt;/code>&lt;/li>
&lt;li>&lt;code>first string&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>0&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="which-of-the-following-isnt-an-arithmatic-operation">Which of the following isn&amp;rsquo;t an arithmatic operation?&lt;/h3>
&lt;ul>
&lt;li>&lt;code>!=&lt;/code>&lt;/li>
&lt;li>&lt;code>/=&lt;/code>&lt;/li>
&lt;li>&lt;code>+=&lt;/code>&lt;/li>
&lt;li>&lt;code>%=&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>!=&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="which-of-the-following-is-not-a-correct-use-of-pointers">Which of the following is &lt;em>NOT&lt;/em> a correct use of pointers?&lt;/h3>
&lt;ul>
&lt;li>&lt;code>int arr[i];&lt;/code>&lt;/li>
&lt;li>&lt;code>int arr[] = {1, 2 3}&lt;/code>&lt;/li>
&lt;li>&lt;code>int * char;&lt;/code>&lt;/li>
&lt;li>&lt;code>int char&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>int char&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="what-would-you-use-add-two-string">What would you use add two string?&lt;/h3>
&lt;ul>
&lt;li>&lt;code>strcon&lt;/code>&lt;/li>
&lt;li>&lt;code>strcmp&lt;/code>&lt;/li>
&lt;li>&lt;code>strcat&lt;/code>&lt;/li>
&lt;li>&lt;code>stradd&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>strcat&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="which-of-the-following-is-the-correct-way-to-declare-constants">Which of the following is the correct way to declare constants?&lt;/h3>
&lt;ul>
&lt;li>&lt;code>#define a = b&lt;/code>&lt;/li>
&lt;li>&lt;code>const char a 'b'&lt;/code>&lt;/li>
&lt;li>&lt;code>const char a = 'b'&lt;/code>&lt;/li>
&lt;li>&lt;code>const char&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>&lt;code>const char a = 'b'&lt;/code>&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="how-do-you-declare-a-function">How do you declare a function&lt;/h3>
&lt;ul>
&lt;li>&lt;code>return-type func-name (argument type);&lt;/code>&lt;/li>
&lt;li>&lt;code>return-type func-name (argument type){}&lt;/code>&lt;/li>
&lt;li>&lt;code>return-type (argument type) func-name;&lt;/code>&lt;/li>
&lt;li>&lt;code>???&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>I am not sure if it is the one with &lt;code>;&lt;/code> or &lt;code>{}&lt;/code>. Either first or second&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="how-not-to-declare-a-2d-array">How &lt;em>NOT&lt;/em> to declare a 2D array?&lt;/h3>
&lt;ul>
&lt;li>&lt;code>int a[3][] = {{1, 2, 3}, {5, 5, 6}, {6, 7, 8}}&lt;/code>&lt;/li>
&lt;li>&lt;code>int a[][3] = {{1, 2, 3}, {5, 5, 6}, {6, 7, 8}}&lt;/code>&lt;/li>
&lt;li>&lt;code>int a[1][3]&lt;/code>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>the first answer&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="what-is-the-output-of-the-following">What is the output of the following?&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">str1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">str1&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str1&lt;/span> &lt;span class="p">,&lt;/span>&lt;span class="n">str2&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Hello&lt;/code>&lt;/li>
&lt;li>&lt;code>Hello World&lt;/code>&lt;/li>
&lt;li>Nothing&lt;/li>
&lt;li>Error
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>Not sure, I think &amp;lsquo;Hello World&amp;rsquo;&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h3 id="how-do-you-declare-a-zero-array">How do you declare a zero Array?&lt;/h3>
&lt;ul>
&lt;li>&lt;code>int a[5] = {};&lt;/code>&lt;/li>
&lt;li>&lt;code>int a[5];&lt;/code>&lt;/li>
&lt;li>&lt;code>int a = 0, b = 0, c = 0;&lt;/code>&lt;br>
&lt;code>int array[5] = {a, b, c}&lt;/code>&lt;/li>
&lt;li>All of the Above
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>All of the Above&lt;/p>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;h2 id="section-2-output-of-the-program">Section 2: Output of the program&lt;/h2>
&lt;h3 id="program-1">Program 1:&lt;/h3>
&lt;p>What is the output of the following code?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;c = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>c = 32&lt;/p>
&lt;/details>
&lt;h3 id="program-2">Program 2&lt;/h3>
&lt;p>What is the output of the following code?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d %d %d %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>11, 12, 12, 192929 (any number)&lt;/p>
&lt;/details>
&lt;h2 id="section-3-correct-the-errors">Section 3: Correct The Errors&lt;/h2>
&lt;h3 id="program-1-1">Program 1&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdin.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%f&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;details>
&lt;summary>Show Error 1&lt;/summary>
&lt;p>&lt;code>stdin&lt;/code> should be &lt;code>stdio&lt;/code>&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>Show Error 2&lt;/summary>
&lt;p>&lt;code>scanf&lt;/code> should use &lt;code>%d&lt;/code> instead of &lt;code>%f&lt;/code>&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>Show Error 3&lt;/summary>
&lt;p>in the &lt;code>for&lt;/code> loop &lt;code>,&lt;/code> should be &lt;code>;&lt;/code>&lt;/p>
&lt;/details>
&lt;/p>
&lt;h3 id="program-2-1">Program 2&lt;/h3>
&lt;p>Correct the program so that it prints &amp;ldquo;This number is odd&amp;rdquo; and &amp;ldquo;This
number is even&amp;rdquo; for odd and even numbers, respectively.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please input the number&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;This number is odd&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;This number is even&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;details>
&lt;summary>Show Error 1&lt;/summary>
&lt;p>should use &lt;code>%&lt;/code> instead of &lt;code>/&lt;/code>&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>Show Error 2&lt;/summary>
&lt;p>missing break after case 0&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>Show Error 3&lt;/summary>
&lt;p>missing break after case 1, and YES I know there is no need for that break, I wasn&amp;rsquo;t able to spot any other Error.&lt;/p>
&lt;/details>
&lt;/p>
&lt;h2 id="section-3-code">Section 3: Code&lt;/h2>
&lt;h3 id="code-for-a-triangle-program">Code for a triangle program&lt;/h3>
&lt;p>Code a program to validate a triangle, a valid triangle has all of its
angles = &lt;code>180&lt;/code>.&lt;br>
Example output:&lt;/p>
&lt;pre tabindex="0">&lt;code>Please input 3 angles: 90 45 45
This triangle is valid
Please input 3 angles: 90 90 90
This triangle is invalid
&lt;/code>&lt;/pre>
&lt;details>
&lt;summary>Show Answer&lt;/summary>
&lt;p>Code it yourself.&lt;/p>
&lt;/details>
&lt;h3 id="code-to-find-the-sum-of-an-array">Code to find the sum of an array&lt;/h3>
&lt;p>Use pointers to find the sum of the following array by using a
function named &lt;code>sum&lt;/code> that does the sum.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Engineering Programming - CS204</title><link>https://stadial.github.io/p/sem3/engineering-programing/</link><pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate><guid>https://stadial.github.io/p/sem3/engineering-programing/</guid><description>&lt;p>Long ago, on Svalbard, when you were a young witch of forty-three,
your mother took your unscarred wrists in her hands, and spoke:&lt;/p>
&lt;blockquote>
&lt;p>Stadial, born of the sea-wind through the spruce&lt;br>
Stadial, green-tinged offshoot of my bough, joy and burden of my life&lt;br>
Stadial, fierce and clever, may our clan’s wisdom be yours:&lt;/p>
&lt;p>Never Code in C++&lt;/p>
&lt;/blockquote>
&lt;p>But &lt;code>C++&lt;/code> has coded you, word has spread about CS204. You make a mental note to avoid
this course, but reassure the course is waiting for you.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;h1 id="tf-who-do-i-pass">TF! who do I pass?&lt;/h1>
&lt;p>Listen young man, if you got the time do &lt;a class="link" href="https://cs50.harvard.edu" target="_blank" rel="noopener"
>CS50&lt;/a> and
you will likely get that sweet, sweet &lt;code>A+&lt;/code>. Otherwise, if you are
visting this site during your finals, you have my empathy, scroll down
for a bit and get the links for the final exam questions, and my final
project.&lt;/p>
&lt;h1 id="last-words">Last words&lt;/h1>
&lt;!-- raw HTML omitted -->
&lt;p>aaaand the intro was by &lt;a class="link" href="https://aphyr.com/posts/341-hexing-the-technical-interview" target="_blank" rel="noopener"
>Aphyr&lt;/a>, modified.&lt;br>
I should post the project when the grades gets released.&lt;/p>
&lt;h1 id="links">Links:&lt;/h1>
&lt;p>scroll down.&lt;/p></description></item></channel></rss>